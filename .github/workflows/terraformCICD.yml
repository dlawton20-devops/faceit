name: 'Terraform CI'

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      WORKING_DIRECTORY: $GITHUB_WORKSPACE/terraform/

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - uses: cschleiden/replace-tokens@v1
      with:
        tokenPrefix: '{'
        tokenSuffix: '}'
        files: '[$GITHUB_WORKSPACE/terraform/*.tf", $GITHUB_WORKSPACE/terraform/*.tfvars]'
      env:
        PROJECT: ${{ secrets.PROJECT }}
        LOCATION: ${{ secrets.LOCATION }}
        BUCKET_NAME: ${{ secrets.BUCKET }}
        NAME: ${{ secrets.NAME }}
        DB_VERSION: ${{ secrets.DB_VERSION }}
        ZONE: ${{secrets.ZONE}}
        
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: cd ${{env.WORKING_DIRECTORY}} && terraform init terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        WORKING_DIRECTORY: ${{env.WORKING_DIRECTORY}}

#     # Checks that all Terraform configuration files adhere to a canonical format
#     - name: Terraform Format
#       run: terraform fmt -check

#     # Generates an execution plan for Terraform
#     - name: Terraform Plan
#       run: terraform plan
#       env:
#         GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
#       if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: cd ${{env.WORKING_DIRECTORY}} && terraform apply -auto-approve -var gcp_auth_file="${{env.GCP_CREDENTIALS}}"
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        WORKING_DIRECTORY: ${{env.WORKING_DIRECTORY}}
